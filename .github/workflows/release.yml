name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_tag: ${{ steps.get-tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Get tag
        id: get-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "::notice::Using workflow_dispatch tag: ${{ github.event.inputs.tag }}"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "::notice::Using git tag: ${GITHUB_REF#refs/tags/}"
          fi
          echo "::notice::Final tag value: $(cat $GITHUB_OUTPUT | grep tag= | cut -d= -f2)"

      - name: Validate tag exists
        run: |
          TAG="${{ steps.get-tag.outputs.tag }}"
          echo "::notice::Checking if tag $TAG exists..."
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "::notice::Tag $TAG exists in repository"
          else
            echo "::warning::Tag $TAG does not exist in repository"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "::notice::Creating tag $TAG from current commit"
              # Configure git for tag creation
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag "$TAG"
              git push origin "$TAG"
            fi
          fi

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-tag.outputs.tag }}
          name: StreamSlate ${{ steps.get-tag.outputs.tag }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Log release creation
        run: |
          echo "::notice::Created release with ID: ${{ steps.create-release.outputs.id }}"
          echo "::notice::Release URL: ${{ steps.create-release.outputs.html_url }}"
          echo "::notice::Upload URL: ${{ steps.create-release.outputs.upload_url }}"

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Xcode Command Line Tools (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Ensure Xcode Command Line Tools are installed
          xcode-select --install 2>/dev/null || true
          # Accept license if needed
          sudo xcodebuild -license accept || true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Import Apple Certificate and Setup Keychain (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Create keychain with password
          KEYCHAIN_PASSWORD="actions"
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Create new keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Add keychain to search list BEFORE importing certificates
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed 's/"//g')
          security set-default-keychain -d user -s $KEYCHAIN_PATH

          # Import certificate with error checking
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          echo "Importing certificate..."
          if ! security import certificate.p12 -k $KEYCHAIN_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security; then
            echo "Error: Failed to import certificate"
            exit 1
          fi

          # Download and import Apple Intermediate Certificate
          echo "Downloading Apple Intermediate Certificate..."
          wget -O AppleWWDRCAG3.cer "https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer"
          security import AppleWWDRCAG3.cer -k $KEYCHAIN_PATH -T /usr/bin/codesign

          # Set partition list for codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Extract and verify signing identity
          SIGNING_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')

          if [ -z "$SIGNING_IDENTITY" ]; then
            echo "Error: No signing identity found in keychain"
            security find-identity -v -p codesigning $KEYCHAIN_PATH
            exit 1
          fi

          echo "Found signing identity: $SIGNING_IDENTITY"
          echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV

          # Verify the certificate can be used
          if ! security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -q "$SIGNING_IDENTITY"; then
            echo "Error: Signing identity verification failed"
            exit 1
          fi

          # Debug: Verify keychain is unlocked and accessible
          security show-keychain-info $KEYCHAIN_PATH

          echo "Certificate setup completed successfully"

          # Clean up certificate file
          rm -f certificate.p12 AppleWWDRCAG3.cer
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Install build requirements from file
          grep -v '^#' requirements/ubuntu-build.txt | grep -v '^$' | xargs sudo apt-get install -y
          # Ensure all Tauri dependencies are installed
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install Visual Studio Build Tools (Windows only)
        if: matrix.platform == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Install Windows C++ Build Tools (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Install Visual Studio Build Tools with C++ workload
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive" -y
        shell: powershell

      - name: Install frontend dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]] || [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            # Platform-specific npm dependency handling for native modules
            echo "Handling native module dependencies for ${{ matrix.platform }}..."
            npm cache clean --force
            rm -rf node_modules package-lock.json
            npm install --ignore-scripts --no-optional
            npm rebuild
            npm install
          else
            # Standard install for other platforms
            npm ci || (echo "npm ci failed, falling back to npm install" && rm -f package-lock.json && npm install)
          fi

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          # API Key authentication (instead of APPLE_ID/APPLE_PASSWORD)
          APPLE_API_ISSUER: ${{ matrix.platform == 'macos-latest' && secrets.APPLE_API_ISSUER || '' }}
          APPLE_API_KEY: ${{ matrix.platform == 'macos-latest' && secrets.APPLE_API_KEY || '' }}
          APPLE_API_KEY_BASE64: ${{ matrix.platform == 'macos-latest' && secrets.APPLE_API_KEY_BASE64 || '' }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeUpdaterJson: false

  docker-release:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.release_tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.release_tag }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.release_tag }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  publish-release:
    needs: [create-release, build-tauri, docker-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.release_tag }}
          draft: false

      - name: Log final release
        run: |
          echo "::notice::Published release ${{ needs.create-release.outputs.release_tag }}"
          echo "::notice::Release should now be visible at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.release_tag }}"
