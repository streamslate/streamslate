name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            runner: streamslate-runner-set
          - platform: macos-latest
            runner: macos-latest
          - platform: windows-latest
            runner: windows-latest

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Xcode Command Line Tools (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Ensure Xcode Command Line Tools are installed
          xcode-select --install 2>/dev/null || true
          # Accept license if needed
          sudo xcodebuild -license accept || true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # First install build requirements
          grep -v '^#' requirements/ubuntu-build.txt | grep -v '^$' | xargs sudo apt-get install -y
          # Then install dev requirements (excluding the -r line)
          grep -v '^#' requirements/ubuntu-dev.txt | grep -v '^$' | grep -v '^-r' | xargs sudo apt-get install -y

      - name: Install Visual Studio Build Tools (Windows only)
        if: matrix.platform == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Install frontend dependencies
        run: npm ci || (echo "npm ci failed, falling back to npm install" && rm -f package-lock.json && npm install)
        shell: bash

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Check formatting
        run: |
          npm run format:check
          cd src-tauri && cargo fmt --all -- --check

      - name: Run linting
        run: npm run lint

      - name: Create dist directory for Rust tests
        run: mkdir -p dist

      - name: Run Rust tests
        run: cd src-tauri && cargo test

      - name: Run Rust clippy (post-dist)
        run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings

      - name: Start dev server and run frontend tests
        shell: bash
        run: |
          # Start the dev server in the background
          npm run dev &
          # Store the PID
          DEV_PID=$!
          # Wait for the server to be ready (simple retry logic)
          echo "Waiting for dev server to start..."
          for i in $(seq 1 30); do
            # Use Node.js to check if server is ready (works on all platforms)
            if node -e "require('http').get('http://localhost:1420', (res) => process.exit(res.statusCode < 400 ? 0 : 1)).on('error', () => process.exit(1))" 2>/dev/null; then
              echo "Dev server is ready!"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done
          # Give it a bit more time to fully initialize
          sleep 5
          # Run the tests
          npm run test:headless
          # Kill the dev server
          kill $DEV_PID || true

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: "--config src-tauri/tauri.conf.json"

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
